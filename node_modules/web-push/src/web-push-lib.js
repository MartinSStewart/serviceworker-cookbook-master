'use strict';

const url = require('url');
const https = require('https');
const asn1 = require('asn1.js');
const jwa = require('jwa');
const crypto = require('crypto');
const Buffer = require('safe-buffer').Buffer;

const WebPushError = require('./web-push-error.js');
const vapidHelper = require('./vapid-helper.js');
const encryptionHelper = require('./encryption-helper.js');
const webPushConstants = require('./web-push-constants.js');
const urlBase64Helper = require('./urlsafe-base64-helper');

// Default TTL is four weeks.
const DEFAULT_TTL = 2419200;

let gcmAPIKey = '';
let vapidDetails;

function WebPushLib() {

}

/**
 * When sending messages to a GCM endpoint you need to set the GCM API key
 * by either calling setGMAPIKey() or passing in the API key as an option
 * to sendNotification().
 * @param  {string} apiKey The API key to send with the GCM request.
 */
WebPushLib.prototype.setGCMAPIKey = function(apiKey) {
  if (apiKey === null) {
    gcmAPIKey = null;
    return;
  }

  if (typeof apiKey === 'undefined'
  || typeof apiKey !== 'string'
  || apiKey.length === 0) {
    throw new Error('The GCM API Key should be a non-empty string or null.');
  }

  gcmAPIKey = apiKey;
};

/**
 * When making requests where you want to define VAPID details, call this
 * method before sendNotification() or pass in the details and options to
 * sendNotification.
 * @param  {string} subject    This must be either a URL or a 'mailto:'
 * address. For example: 'https://my-site.com/contact' or
 * 'mailto: contact@my-site.com'
 * @param  {string} publicKey  The public VAPID key, a URL safe, base64 encoded string
 * @param  {string} privateKey The private VAPID key, a URL safe, base64 encoded string.
 */
WebPushLib.prototype.setVapidDetails = function(subject, publicKey, privateKey) {
    if (arguments.length === 1 && arguments[0] === null) {
      vapidDetails = null;
      return;
    }

    vapidHelper.validateSubject(subject);
    vapidHelper.validatePublicKey(publicKey);
    vapidHelper.validatePrivateKey(privateKey);

    vapidDetails = {
      subject: subject,
      publicKey: publicKey,
      privateKey: privateKey
    };
  };

function getFutureExpirationTimestamp(numSeconds) {
  const futureExp = new Date();
  futureExp.setSeconds(futureExp.getSeconds() + numSeconds);
  return Math.floor(futureExp.getTime() / 1000);
}

const ECPrivateKeyASN = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').explicit(0).objid()
      .optional(),
    this.key('publicKey').explicit(1).bitstr()
      .optional()
  );
});

const DEFAULT_EXPIRATION_SECONDS = 12 * 60 * 60;

function getParamSize(keySize) {
    var result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);
    return result;
}

const MAX_OCTET = 0x80;
const CLASS_UNIVERSAL = 0;
const PRIMITIVE_BIT = 0x20;
const TAG_SEQ = 0x10;
const TAG_INT = 0x02;
const ENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6);
const ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);

function base64Url(base64) {
	return base64
		.replace(/=/g, '')
		.replace(/\+/g, '-')
		.replace(/\//g, '_');
}

function derToJose(signature, alg) {
	signature = Buffer.from(signature, 'base64');
	console.log(signature);
	const paramBytes = getParamSize(256);

	// the DER encoded param should at most be the param size, plus a padding
	// zero, since due to being a signed integer
	const maxEncodedParamLength = paramBytes + 1;
	const inputLength = signature.length;
	const seqLength = signature[1] === (MAX_OCTET | 1) ? signature[2] : signature[1];
	const offset0 = seqLength === (MAX_OCTET | 1) ? 4 : 3;
	const rLength = signature[offset0];
	const rOffset = offset0 + 1;
	const offset1 = offset0 + rLength + 2;
	const sLength = signature[offset1];
	const sOffset = offset1 + 1;
	const rPadding = paramBytes - rLength;
	const sPadding = paramBytes - sLength;

	const dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);

    var i = offset1 + 1 + sLength;
	for (i = 0; i < rPadding; i + 1) {
		dst[offset] = 0;
	}
	signature.copy(dst, i, rOffset + Math.max(-rPadding, 0), rOffset + rLength);

	var offset = paramBytes;

	for (const o = offset; offset < o + sPadding; offset + 1) {
		dst[offset] = 0;
	}
	signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);

	return base64Url(dst.toString('base64'));
}


WebPushLib.prototype.generateRequestDetails = function(subscription, payload, options) {

    const requestDetails = { method: 'POST', headers: { TTL: DEFAULT_TTL } };

    requestDetails.headers['Content-Length'] = 0;

    const parsedUrl = url.parse(subscription.endpoint);
    const audience = parsedUrl.protocol + '//' + parsedUrl.host;


    const publicKey = Buffer.from(vapidDetails.publicKey, 'base64url');
    const privateKey = Buffer.from(vapidDetails.privateKey, 'base64url');

    const expiration = getFutureExpirationTimestamp(DEFAULT_EXPIRATION_SECONDS);

    const header = {
        typ: 'JWT',
        alg: 'ES256'
    };

    const jwtPayload = {
        aud: audience,
        exp: expiration,
        sub: vapidDetails.subject
    };

    const pemKey = //toPEM(privateKey);
        ECPrivateKeyASN.encode({
            version: 1,
            privateKey: privateKey,
            parameters: [1, 2, 840, 10045, 3, 1, 7] // prime256v1
          }, 'pem', {
            label: 'EC PRIVATE KEY'
          });


    function base64url(string, encoding) {
      return Buffer
        .from(string, encoding)
        .toString('base64')
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
    }

    function fromBase64(base64) {
      return base64
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
    }

    const encodedHeader = base64url(JSON.stringify(header), 'binary');
    const encodedPayload = base64url(JSON.stringify(jwtPayload), 'utf8');
    const securedInput = encodedHeader + '.' + encodedPayload;

    const signer = crypto.createSign('RSA-SHA256');
    const sig = (signer.update(securedInput), signer.sign(pemKey, 'base64'));



    const signature = derToJose(fromBase64(sig), 'ES256');
    const jwt = securedInput + '.' + signature;


    const vapidHeaders = {
      Authorization: 'vapid t=' + jwt + ', k=' + vapidDetails.publicKey
    };

    console.log(vapidHeaders);
    requestDetails.headers.Authorization = vapidHeaders.Authorization;

    requestDetails.headers.Urgency = webPushConstants.supportedUrgency.NORMAL;
    requestDetails.endpoint = subscription.endpoint;

    return requestDetails;
  };

/**
 * To send a push notification call this method with a subscription, optional
 * payload and any options.
 * @param  {PushSubscription} subscription The PushSubscription you wish to
 * send the notification to.
 * @param  {string|Buffer} [payload]       The payload you wish to send to the
 * the user.
 * @param  {Object} [options]              Options for the GCM API key and
 * vapid keys can be passed in if they are unique for each notification you
 * wish to send.
 * @return {Promise}                       This method returns a Promise which
 * resolves if the sending of the notification was successful, otherwise it
 * rejects.
 */
WebPushLib.prototype.sendNotification = function(subscription, payload, options) {
    let requestDetails;
    try {
      requestDetails = this.generateRequestDetails(subscription, payload, options);
    } catch (err) {
      return Promise.reject(err);
    }

    return new Promise(function(resolve, reject) {
      const httpsOptions = {};
      const urlParts = url.parse(requestDetails.endpoint);
      httpsOptions.hostname = urlParts.hostname;
      httpsOptions.port = urlParts.port;
      httpsOptions.path = urlParts.path;

      httpsOptions.headers = requestDetails.headers;
      httpsOptions.method = requestDetails.method;

      if (requestDetails.timeout) {
        httpsOptions.timeout = requestDetails.timeout;
      }

      if (requestDetails.agent) {
        httpsOptions.agent = requestDetails.agent;
      }

      if (requestDetails.proxy) {
        const { HttpsProxyAgent } = require('https-proxy-agent'); // eslint-disable-line global-require
        httpsOptions.agent = new HttpsProxyAgent(requestDetails.proxy);
      }

      const pushRequest = https.request(httpsOptions, function(pushResponse) {
        let responseText = '';

        pushResponse.on('data', function(chunk) {
          responseText += chunk;
        });

        pushResponse.on('end', function() {
          if (pushResponse.statusCode < 200 || pushResponse.statusCode > 299) {
            reject(new WebPushError(
              'Received unexpected response code',
              pushResponse.statusCode,
              pushResponse.headers,
              responseText,
              requestDetails.endpoint
            ));
          } else {
            resolve({
              statusCode: pushResponse.statusCode,
              body: responseText,
              headers: pushResponse.headers
            });
          }
        });
      });

      if (requestDetails.timeout) {
        pushRequest.on('timeout', function() {
          pushRequest.destroy(new Error('Socket timeout'));
        });
      }

      pushRequest.on('error', function(e) {
        reject(e);
      });

      if (requestDetails.body) {
        pushRequest.write(requestDetails.body);
      }

      pushRequest.end();
    });
  };

module.exports = WebPushLib;
